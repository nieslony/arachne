/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package at.nieslony.arachne;

import at.nieslony.arachne.pki.Pki;
import at.nieslony.arachne.pki.PkiNotInitializedException;
import at.nieslony.arachne.settings.SettingsRepository;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author claas
 */
@RestController
@RequestMapping("/api/openvpn")
@PropertySource("classpath:arachne.properties")
public class OpenVpnRestController {

    private static final Logger logger = LoggerFactory.getLogger(OpenVpnRestController.class);

    @Autowired
    SettingsRepository settingsRepository;

    @Autowired
    Pki pki;

    @Value("${vpnConfigDir}")
    String vpnConfigDir;

    @GetMapping("/user_settings")
    public OpenVpnUserSettings get_user_settings() {
        return new OpenVpnUserSettings(settingsRepository);
    }

    @PostMapping("/user_settings")
    public OpenVpnUserSettings post_user_settings(
            @RequestBody OpenVpnUserSettings settings
    ) {
        logger.info("Set new openVPN user server config: " + settings.toString());
        settings.save(settingsRepository);
        writeOpenVpnUserServerConfig(settings);
        return settings;
    }

    void writeOpenVpnUserServerConfig(OpenVpnUserSettings settings) {
        String fileName = vpnConfigDir + "/openvpn-user-server.conf";
        logger.info("Writing openvpn user server config to " + fileName);

        try {
            logger.info("Creating " + vpnConfigDir);
            Files.createDirectories(Path.of(vpnConfigDir));
        } catch (IOException ex) {
            logger.error(
                    "Cannot create directory %s: %s"
                            .formatted(vpnConfigDir, ex.getMessage())
            );
            return;
        }

        try {
            FileWriter writer = new FileWriter(fileName);

            writer.write("# Generated by Arachne on %s\n".formatted(new Date().toString()));
            writer.write("server %s %s\n"
                    .formatted(
                            settings.getClientNetwork(),
                            OpenVpnUserSettings.bits2Subnetmask(settings.getClientMask())
                    )
            );
            writer.write("local %s\n".formatted(settings.getListenIp()));
            writer.write("proto %s\n".formatted(settings.getListenProtocol().toLowerCase()));
            writer.write("port %d\n".formatted(settings.getListenPort()));
            writer.write("dev-type %s\n".formatted(settings.getDeviceType()));
            writer.write("dev %s\n".formatted(settings.getDeviceName()));
            writer.write("keepalive %d %d\n"
                    .formatted(
                            settings.getKeepaliveInterval(),
                            settings.getKeepaliveTimeout()));

            writer.write("<ca>\n%s</ca>\n".formatted(pki.getRootCertAsBase64()));
            writer.write("<cert>\n%s</cert>\n".formatted(pki.getServerCertAsBase64()));
            writer.write("<key>\n%s</key>\n".formatted(pki.getServerKeyAsBase64()));
            writer.write("<dh>\n%s</dh>\n".formatted(pki.getDhParams()));

            writer.close();
        } catch (PkiNotInitializedException ex) {
            logger.error("# pki not yet initialized");
        } catch (IOException ex) {
            logger.error(
                    "Cannot write to %s: %s"
                            .formatted(fileName, ex.getMessage())
            );
        }
    }
}
