/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package at.nieslony.arachne;

import at.nieslony.arachne.openvpnmanagement.OpenVpnManagement;
import at.nieslony.arachne.openvpnmanagement.OpenVpnManagementException;
import at.nieslony.arachne.pki.Pki;
import at.nieslony.arachne.pki.PkiNotInitializedException;
import at.nieslony.arachne.settings.SettingsRepository;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 * @author claas
 */
@RestController
@RequestMapping("/api/openvpn")
@PropertySource("classpath:arachne.properties")
public class OpenVpnRestController {

    private static final Logger logger = LoggerFactory.getLogger(OpenVpnRestController.class);

    @Autowired
    SettingsRepository settingsRepository;

    @Autowired
    Pki pki;

    @Autowired
    OpenVpnManagement openVpnManagement;

    @Value("${vpnConfigDir}")
    String vpnConfigDir;

    @GetMapping("/user_settings")
    public OpenVpnUserSettings get_user_settings() {
        return new OpenVpnUserSettings(settingsRepository);
    }

    @PostMapping("/user_settings")
    public OpenVpnUserSettings post_user_settings(
            @RequestBody OpenVpnUserSettings settings
    ) {
        logger.info("Set new openVPN user server config: " + settings.toString());
        settings.save(settingsRepository);
        writeOpenVpnUserServerConfig(settings);
        return settings;
    }

    void writeOpenVpnUserServerConfig(OpenVpnUserSettings settings) {
        String fileName = vpnConfigDir + "/openvpn-user-server.conf";
        logger.info("Writing openvpn user server config to " + fileName);

        try {
            logger.info("Creating " + vpnConfigDir);
            Files.createDirectories(Path.of(vpnConfigDir));
        } catch (IOException ex) {
            logger.error(
                    "Cannot create directory %s: %s"
                            .formatted(vpnConfigDir, ex.getMessage())
            );
            return;
        }

        try (FileWriter fw = new FileWriter(fileName)) {
            PrintWriter writer = new PrintWriter(fw);
            writer.println("# Generated by Arachne on %s".formatted(new Date().toString()));
            writer.println("server %s %s"
                    .formatted(
                            settings.getClientNetwork(),
                            NetUtils.maskLen2Mask(settings.getClientMask())
                    )
            );
            writer.println("local %s".formatted(settings.getListenIp()));
            writer.println("proto %s".formatted(settings.getListenProtocol().toLowerCase()));
            writer.println("port %d".formatted(settings.getListenPort()));
            writer.println("dev-type %s".formatted(settings.getDeviceType()));
            writer.println("dev %s".formatted(settings.getDeviceName()));
            writer.println("keepalive %d %d"
                    .formatted(
                            settings.getKeepaliveInterval(),
                            settings.getKeepaliveTimeout()));
            writer.println("topology subnet");
            writer.println(openVpnManagement.getVpnConfigSetting() + "\n");

            writer.println("<ca>\n%s</ca>".formatted(pki.getRootCertAsBase64()));
            writer.println("<cert>\n%s</cert>".formatted(pki.getServerCertAsBase64()));
            writer.println("<key>\n%s</key>".formatted(pki.getServerKeyAsBase64()));
            writer.println("<dh>\n%s</dh>".formatted(pki.getDhParams()));
            openVpnManagement.restartServer();
        } catch (PkiNotInitializedException ex) {
            logger.error("# pki not yet initialized");
        } catch (IOException ex) {
            logger.error(
                    "Cannot write to %s: %s"
                            .formatted(fileName, ex.getMessage())
            );
        } catch (OpenVpnManagementException ex) {
            logger.error("Cannot restart openVPN: " + ex.getMessage());
        }
    }

    void openVpnUSerConfig(OpenVpnUserSettings settings, String username) {
        try {
            String userCert = pki.getUserCertAsBase64(username);
            String privateKey = pki.getUserKeyAsBase64(username);
            String caCert = pki.getRootCertAsBase64();

            StringWriter sw = new StringWriter();
            PrintWriter writer = new PrintWriter(sw);
            writer.println("# Generated by Arachne on %s\n".formatted(new Date().toString()));
            writer.println("client");
            writer.println("dev-type %s".formatted(settings.getDeviceType()));
            writer.println("dev %s".formatted(settings.getDeviceName()));
            writer.println("proto %s".formatted(settings.getListenProtocol().toLowerCase()));
            writer.println("remote %s %d".formatted(settings.getRemote(), settings.getListenPort()));
            writer.println();
            writer.println("<ca>\n%s\n</ca>".formatted(caCert));
            writer.println("<cert>\n%s\n</cert>".formatted(userCert));
            writer.println("<key>\n%s</key>".formatted(privateKey));
        } catch (PkiNotInitializedException ex) {

        }
    }
}
